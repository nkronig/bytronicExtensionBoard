
v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00803e00  00000410  000004a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00803e04  00803e04  000004a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002560  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017e7  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000550  00000000  00000000  000042c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00004814  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001042  00000000  00000000  0000492c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e6  00000000  00000000  0000596e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00005c54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	c8 c0       	rjmp	.+400    	; 0x1b8 <__vector_19>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e0 e1       	ldi	r30, 0x10	; 16
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a4 30       	cpi	r26, 0x04	; 4
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2e e3       	ldi	r18, 0x3E	; 62
  58:	a4 e0       	ldi	r26, 0x04	; 4
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a9 31       	cpi	r26, 0x19	; 25
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	97 d1       	rcall	.+814    	; 0x396 <main>
  68:	d1 c1       	rjmp	.+930    	; 0x40c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <TWI_Slave_init>:
//------------------------------------------------
void prepareTransmit(volatile uint16_t v){
	transmitProgressMax=5;
	transmit[1] = (uint8_t)v;
	transmit[0] = (uint8_t)((uint16_t)v >> 8);
}
  6c:	e0 e0       	ldi	r30, 0x00	; 0
  6e:	f2 e0       	ldi	r31, 0x02	; 2
  70:	81 81       	ldd	r24, Z+1	; 0x01
  72:	80 61       	ori	r24, 0x10	; 16
  74:	81 83       	std	Z+1, r24	; 0x01
  76:	e0 e1       	ldi	r30, 0x10	; 16
  78:	f8 e0       	ldi	r31, 0x08	; 8
  7a:	83 81       	ldd	r24, Z+3	; 0x03
  7c:	8e 7f       	andi	r24, 0xFE	; 254
  7e:	83 83       	std	Z+3, r24	; 0x03
  80:	8f e6       	ldi	r24, 0x6F	; 111
  82:	84 87       	std	Z+12, r24	; 0x0c
  84:	81 ee       	ldi	r24, 0xE1	; 225
  86:	81 87       	std	Z+9, r24	; 0x09
  88:	81 85       	ldd	r24, Z+9	; 0x09
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	81 87       	std	Z+9, r24	; 0x09
  8e:	08 95       	ret

00000090 <I2C_0_send_ack>:
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__RODATA_PM_OFFSET__+0x7f881a>
  96:	08 95       	ret

00000098 <prepareReceive>:
uint16_t prepareReceive(volatile uint8_t v[]){
	uint16_t b  = (uint16_t)((uint16_t)v[1] << 8) + (uint16_t)v[2];
  98:	fc 01       	movw	r30, r24
  9a:	21 81       	ldd	r18, Z+1	; 0x01
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	32 2f       	mov	r19, r18
  a0:	22 27       	eor	r18, r18
  a2:	82 81       	ldd	r24, Z+2	; 0x02
	return(b);
}
  a4:	a9 01       	movw	r20, r18
  a6:	48 0f       	add	r20, r24
  a8:	51 1d       	adc	r21, r1
  aa:	ca 01       	movw	r24, r20
  ac:	08 95       	ret

000000ae <setServoTime>:
volatile int i =0;
void setServoTime(int servo, int per){
  ae:	9c 01       	movw	r18, r24
	int time = per * 41 / 255 + 39;
  b0:	49 e2       	ldi	r20, 0x29	; 41
  b2:	46 9f       	mul	r20, r22
  b4:	c0 01       	movw	r24, r0
  b6:	47 9f       	mul	r20, r23
  b8:	90 0d       	add	r25, r0
  ba:	11 24       	eor	r1, r1
  bc:	6f ef       	ldi	r22, 0xFF	; 255
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	7e d1       	rcall	.+764    	; 0x3be <__divmodhi4>
  c2:	69 5d       	subi	r22, 0xD9	; 217
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
	switch(servo){
  c6:	23 30       	cpi	r18, 0x03	; 3
  c8:	31 05       	cpc	r19, r1
  ca:	b1 f0       	breq	.+44     	; 0xf8 <setServoTime+0x4a>
  cc:	3c f4       	brge	.+14     	; 0xdc <setServoTime+0x2e>
  ce:	21 30       	cpi	r18, 0x01	; 1
  d0:	31 05       	cpc	r19, r1
  d2:	61 f0       	breq	.+24     	; 0xec <setServoTime+0x3e>
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	61 f0       	breq	.+24     	; 0xf2 <setServoTime+0x44>
  da:	08 95       	ret
  dc:	25 30       	cpi	r18, 0x05	; 5
  de:	31 05       	cpc	r19, r1
  e0:	89 f0       	breq	.+34     	; 0x104 <setServoTime+0x56>
  e2:	6c f0       	brlt	.+26     	; 0xfe <setServoTime+0x50>
  e4:	26 30       	cpi	r18, 0x06	; 6
  e6:	31 05       	cpc	r19, r1
  e8:	81 f0       	breq	.+32     	; 0x10a <setServoTime+0x5c>
  ea:	08 95       	ret
		case 1:
		TCA0.SPLIT.LCMP2 = time;
  ec:	60 93 2c 0a 	sts	0x0A2C, r22	; 0x800a2c <__RODATA_PM_OFFSET__+0x7f8a2c>
		break;
  f0:	08 95       	ret
		case 2:
		TCA0.SPLIT.LCMP1 = time;
  f2:	60 93 2a 0a 	sts	0x0A2A, r22	; 0x800a2a <__RODATA_PM_OFFSET__+0x7f8a2a>
		break;
  f6:	08 95       	ret
		case 3:
		TCA0.SPLIT.LCMP0 = time;
  f8:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
		break;
  fc:	08 95       	ret
		case 4:
		TCA0.SPLIT.HCMP2 = time;
  fe:	60 93 2d 0a 	sts	0x0A2D, r22	; 0x800a2d <__RODATA_PM_OFFSET__+0x7f8a2d>
		break;
 102:	08 95       	ret
		case 5:
		TCA0.SPLIT.HCMP1 = time;
 104:	60 93 2b 0a 	sts	0x0A2B, r22	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
		break;
 108:	08 95       	ret
		case 6:
		TCA0.SPLIT.HCMP0 = time;
 10a:	60 93 29 0a 	sts	0x0A29, r22	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
 10e:	08 95       	ret

00000110 <setMosfet>:
		break;
	}
}
void setMosfet(uint16_t data){
	uint8_t num = data &0x003F;
 110:	f8 2f       	mov	r31, r24
 112:	ff 73       	andi	r31, 0x3F	; 63
	uint8_t reverse_num = 0;
	for (int i = 0; i < 6; i++) {
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
}
void setMosfet(uint16_t data){
	uint8_t num = data &0x003F;
	uint8_t reverse_num = 0;
 118:	e0 e0       	ldi	r30, 0x00	; 0
	for (int i = 0; i < 6; i++) {
 11a:	18 c0       	rjmp	.+48     	; 0x14c <setMosfet+0x3c>
		if ((num & (1 << i)))
 11c:	4f 2f       	mov	r20, r31
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <setMosfet+0x18>
 124:	55 95       	asr	r21
 126:	47 95       	ror	r20
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <setMosfet+0x14>
 12c:	40 ff       	sbrs	r20, 0
 12e:	0c c0       	rjmp	.+24     	; 0x148 <setMosfet+0x38>
		reverse_num |= 1 << ((6 - 1) - i);
 130:	65 e0       	ldi	r22, 0x05	; 5
 132:	70 e0       	ldi	r23, 0x00	; 0
 134:	62 1b       	sub	r22, r18
 136:	73 0b       	sbc	r23, r19
 138:	41 e0       	ldi	r20, 0x01	; 1
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <setMosfet+0x32>
 13e:	44 0f       	add	r20, r20
 140:	55 1f       	adc	r21, r21
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <setMosfet+0x2e>
 146:	e4 2b       	or	r30, r20
	}
}
void setMosfet(uint16_t data){
	uint8_t num = data &0x003F;
	uint8_t reverse_num = 0;
	for (int i = 0; i < 6; i++) {
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	26 30       	cpi	r18, 0x06	; 6
 14e:	31 05       	cpc	r19, r1
 150:	2c f3       	brlt	.-54     	; 0x11c <setMosfet+0xc>
		if ((num & (1 << i)))
		reverse_num |= 1 << ((6 - 1) - i);
	}
	PORTC.OUT = (reverse_num);
 152:	e0 93 44 04 	sts	0x0444, r30	; 0x800444 <__RODATA_PM_OFFSET__+0x7f8444>
	PORTB.OUT = (PORTB.IN & 0x2F) | (((data &0x0040) << 1) | ((data &0x0080) >> 1) | ((data &0x0100) >> 4));
 156:	e0 e2       	ldi	r30, 0x20	; 32
 158:	f4 e0       	ldi	r31, 0x04	; 4
 15a:	30 85       	ldd	r19, Z+8	; 0x08
 15c:	bc 01       	movw	r22, r24
 15e:	60 78       	andi	r22, 0x80	; 128
 160:	77 27       	eor	r23, r23
 162:	76 95       	lsr	r23
 164:	67 95       	ror	r22
 166:	ac 01       	movw	r20, r24
 168:	44 27       	eor	r20, r20
 16a:	51 70       	andi	r21, 0x01	; 1
 16c:	52 95       	swap	r21
 16e:	42 95       	swap	r20
 170:	4f 70       	andi	r20, 0x0F	; 15
 172:	45 27       	eor	r20, r21
 174:	5f 70       	andi	r21, 0x0F	; 15
 176:	45 27       	eor	r20, r21
 178:	28 2f       	mov	r18, r24
 17a:	20 74       	andi	r18, 0x40	; 64
 17c:	22 0f       	add	r18, r18
 17e:	26 2b       	or	r18, r22
 180:	24 2b       	or	r18, r20
 182:	3f 72       	andi	r19, 0x2F	; 47
 184:	23 2b       	or	r18, r19
 186:	24 83       	std	Z+4, r18	; 0x04
	PORTA.OUT = (PORTA.IN & 0x3F) | (((data &0x0200) >> 2) | ((data &0x0400) >> 4));
 188:	e0 e0       	ldi	r30, 0x00	; 0
 18a:	f4 e0       	ldi	r31, 0x04	; 4
 18c:	20 85       	ldd	r18, Z+8	; 0x08
 18e:	ac 01       	movw	r20, r24
 190:	44 27       	eor	r20, r20
 192:	52 70       	andi	r21, 0x02	; 2
 194:	56 95       	lsr	r21
 196:	47 95       	ror	r20
 198:	56 95       	lsr	r21
 19a:	47 95       	ror	r20
 19c:	88 27       	eor	r24, r24
 19e:	94 70       	andi	r25, 0x04	; 4
 1a0:	92 95       	swap	r25
 1a2:	82 95       	swap	r24
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	89 27       	eor	r24, r25
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	89 27       	eor	r24, r25
 1ac:	92 2f       	mov	r25, r18
 1ae:	9f 73       	andi	r25, 0x3F	; 63
 1b0:	84 2b       	or	r24, r20
 1b2:	89 2b       	or	r24, r25
 1b4:	84 83       	std	Z+4, r24	; 0x04
 1b6:	08 95       	ret

000001b8 <__vector_19>:
}
ISR(TWI0_TWIS_vect){
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
	
	// Address received
	
	if ((TWI0.SSTATUS & TWI_APIF_bm) && (TWI0.SSTATUS & TWI_AP_bm)) {
 1da:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 1de:	86 ff       	sbrs	r24, 6
 1e0:	22 c0       	rjmp	.+68     	; 0x226 <__DATA_REGION_LENGTH__+0x26>
 1e2:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 1e6:	80 ff       	sbrs	r24, 0
 1e8:	1e c0       	rjmp	.+60     	; 0x226 <__DATA_REGION_LENGTH__+0x26>
		I2C_0_send_ack();
 1ea:	52 df       	rcall	.-348    	; 0x90 <I2C_0_send_ack>
		if (!stopped)
 1ec:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 1f0:	88 23       	and	r24, r24
 1f2:	c9 f0       	breq	.+50     	; 0x226 <__DATA_REGION_LENGTH__+0x26>
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <__DATA_REGION_LENGTH__+0x4>
			
		}
		else{
			for (int i = 0; i<16; i++)
			{
				rec[i] = 0;
 1fa:	fc 01       	movw	r30, r24
 1fc:	ec 5f       	subi	r30, 0xFC	; 252
 1fe:	f1 4c       	sbci	r31, 0xC1	; 193
 200:	10 82       	st	Z, r1
		if (!stopped)
		{
			
		}
		else{
			for (int i = 0; i<16; i++)
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	80 31       	cpi	r24, 0x10	; 16
 206:	91 05       	cpc	r25, r1
 208:	c4 f3       	brlt	.-16     	; 0x1fa <__vector_19+0x42>
			{
				rec[i] = 0;
			}
			err = 1;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <err>
 212:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <err+0x1>
			x=0;
 216:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <x>
 21a:	10 92 17 3e 	sts	0x3E17, r1	; 0x803e17 <x+0x1>
			stopped = 0;
 21e:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <__DATA_REGION_ORIGIN__>
			transmitProgress=0;
 222:	10 92 18 3e 	sts	0x3E18, r1	; 0x803e18 <transmitProgress>
		}
	}
	// Data received
	if ((TWI0.SSTATUS & TWI_DIF_bm) && (!(TWI0.SSTATUS & TWI_DIR_bm))) {
 226:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 22a:	88 23       	and	r24, r24
 22c:	bc f4       	brge	.+46     	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
 22e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 232:	81 fd       	sbrc	r24, 1
 234:	13 c0       	rjmp	.+38     	; 0x25c <__DATA_REGION_LENGTH__+0x5c>
		I2C_0_send_ack();
 236:	2c df       	rcall	.-424    	; 0x90 <I2C_0_send_ack>
		rec[x] = TWI0_SDATA;
 238:	e0 91 16 3e 	lds	r30, 0x3E16	; 0x803e16 <x>
 23c:	f0 91 17 3e 	lds	r31, 0x3E17	; 0x803e17 <x+0x1>
 240:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <__RODATA_PM_OFFSET__+0x7f881d>
 244:	ec 5f       	subi	r30, 0xFC	; 252
 246:	f1 4c       	sbci	r31, 0xC1	; 193
 248:	80 83       	st	Z, r24
		x++;
 24a:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <x>
 24e:	90 91 17 3e 	lds	r25, 0x3E17	; 0x803e17 <x+0x1>
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	80 93 16 3e 	sts	0x3E16, r24	; 0x803e16 <x>
 258:	90 93 17 3e 	sts	0x3E17, r25	; 0x803e17 <x+0x1>
	}
	if ((TWI0.SSTATUS & TWI_DIF_bm) && (TWI0.SSTATUS & TWI_DIR_bm)) {
 25c:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 260:	88 23       	and	r24, r24
 262:	34 f5       	brge	.+76     	; 0x2b0 <__DATA_REGION_LENGTH__+0xb0>
 264:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 268:	81 ff       	sbrs	r24, 1
 26a:	22 c0       	rjmp	.+68     	; 0x2b0 <__DATA_REGION_LENGTH__+0xb0>
		if (!(transmitProgress==transmitProgressMax))
 26c:	90 91 18 3e 	lds	r25, 0x3E18	; 0x803e18 <transmitProgress>
 270:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <transmitProgressMax>
 274:	98 17       	cp	r25, r24
 276:	89 f0       	breq	.+34     	; 0x29a <__DATA_REGION_LENGTH__+0x9a>
		{
			uint8_t tmp = transmit[transmitProgress];
 278:	e0 91 18 3e 	lds	r30, 0x3E18	; 0x803e18 <transmitProgress>
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	ee 5f       	subi	r30, 0xFE	; 254
 280:	f1 4c       	sbci	r31, 0xC1	; 193
 282:	80 81       	ld	r24, Z
			TWI0.SCTRLB = 0b00000011;
 284:	e0 e1       	ldi	r30, 0x10	; 16
 286:	f8 e0       	ldi	r31, 0x08	; 8
 288:	93 e0       	ldi	r25, 0x03	; 3
 28a:	92 87       	std	Z+10, r25	; 0x0a
			TWI0.SDATA = (int)tmp;
 28c:	85 87       	std	Z+13, r24	; 0x0d
			transmitProgress++;
 28e:	80 91 18 3e 	lds	r24, 0x3E18	; 0x803e18 <transmitProgress>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 18 3e 	sts	0x3E18, r24	; 0x803e18 <transmitProgress>
 298:	05 c0       	rjmp	.+10     	; 0x2a4 <__DATA_REGION_LENGTH__+0xa4>
		}
		else{
			TWI0.SCTRLB = 0b00000011;
 29a:	e0 e1       	ldi	r30, 0x10	; 16
 29c:	f8 e0       	ldi	r31, 0x08	; 8
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	82 87       	std	Z+10, r24	; 0x0a
			TWI0.SDATA = 0;
 2a2:	15 86       	std	Z+13, r1	; 0x0d
		}
		//PORTC.OUT ^= (1<<0);
		err = 200;
 2a4:	88 ec       	ldi	r24, 0xC8	; 200
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <err>
 2ac:	90 93 15 3e 	sts	0x3E15, r25	; 0x803e15 <err+0x1>
	}
	if ((TWI0.SSTATUS & TWI_APIF_bm) && (!(TWI0.SSTATUS & TWI_AP_bm))) {
 2b0:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 2b4:	86 ff       	sbrs	r24, 6
 2b6:	2f c0       	rjmp	.+94     	; 0x316 <__DATA_REGION_LENGTH__+0x116>
 2b8:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 2bc:	80 fd       	sbrc	r24, 0
 2be:	2b c0       	rjmp	.+86     	; 0x316 <__DATA_REGION_LENGTH__+0x116>
		
		if (x > 1)
 2c0:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <x>
 2c4:	90 91 17 3e 	lds	r25, 0x3E17	; 0x803e17 <x+0x1>
 2c8:	02 97       	sbiw	r24, 0x02	; 2
 2ca:	fc f0       	brlt	.+62     	; 0x30a <__DATA_REGION_LENGTH__+0x10a>
		{
			if (rec[0] >= 1 && rec[0] <= 6)
 2cc:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
 2d0:	88 23       	and	r24, r24
 2d2:	99 f0       	breq	.+38     	; 0x2fa <__DATA_REGION_LENGTH__+0xfa>
 2d4:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
 2d8:	87 30       	cpi	r24, 0x07	; 7
 2da:	78 f4       	brcc	.+30     	; 0x2fa <__DATA_REGION_LENGTH__+0xfa>
			{
				if(rec[0] == 2){
 2dc:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	19 f4       	brne	.+6      	; 0x2ea <__DATA_REGION_LENGTH__+0xea>
					PORTB.OUTTGL = (1<<2);
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <__RODATA_PM_OFFSET__+0x7f8427>
				}
				setServoTime(rec[0], prepareReceive(rec));
 2ea:	84 e0       	ldi	r24, 0x04	; 4
 2ec:	9e e3       	ldi	r25, 0x3E	; 62
 2ee:	d4 de       	rcall	.-600    	; 0x98 <prepareReceive>
 2f0:	bc 01       	movw	r22, r24
 2f2:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	da de       	rcall	.-588    	; 0xae <setServoTime>
			}
			if (rec[0]==0)
 2fa:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <__data_end>
 2fe:	81 11       	cpse	r24, r1
 300:	04 c0       	rjmp	.+8      	; 0x30a <__DATA_REGION_LENGTH__+0x10a>
			{
				setMosfet(prepareReceive(rec));
 302:	84 e0       	ldi	r24, 0x04	; 4
 304:	9e e3       	ldi	r25, 0x3E	; 62
 306:	c8 de       	rcall	.-624    	; 0x98 <prepareReceive>
 308:	03 df       	rcall	.-506    	; 0x110 <setMosfet>
			}
		}
		stopped = 1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <__DATA_REGION_ORIGIN__>
		TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__RODATA_PM_OFFSET__+0x7f881a>
	}
}    // end ISR
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <timerAInit>:


void timerAInit(void)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
	PORTMUX.CTRLC |= (PORTMUX_TCA02_bm);
 33c:	e0 e0       	ldi	r30, 0x00	; 0
 33e:	f2 e0       	ldi	r31, 0x02	; 2
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	84 60       	ori	r24, 0x04	; 4
 344:	82 83       	std	Z+2, r24	; 0x02
	
	TCA0.SPLIT.LPER = 255;
 346:	e0 e0       	ldi	r30, 0x00	; 0
 348:	fa e0       	ldi	r31, 0x0A	; 10
 34a:	8f ef       	ldi	r24, 0xFF	; 255
 34c:	86 a3       	std	Z+38, r24	; 0x26
	TCA0.SPLIT.HPER = 255;
 34e:	87 a3       	std	Z+39, r24	; 0x27
	
	for(int i = 1; i<=6; i++){
 350:	c1 e0       	ldi	r28, 0x01	; 1
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	05 c0       	rjmp	.+10     	; 0x360 <timerAInit+0x28>
		setServoTime(i, 128);
 356:	60 e8       	ldi	r22, 0x80	; 128
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	ce 01       	movw	r24, r28
 35c:	a8 de       	rcall	.-688    	; 0xae <setServoTime>
	PORTMUX.CTRLC |= (PORTMUX_TCA02_bm);
	
	TCA0.SPLIT.LPER = 255;
	TCA0.SPLIT.HPER = 255;
	
	for(int i = 1; i<=6; i++){
 35e:	21 96       	adiw	r28, 0x01	; 1
 360:	c7 30       	cpi	r28, 0x07	; 7
 362:	d1 05       	cpc	r29, r1
 364:	c4 f3       	brlt	.-16     	; 0x356 <timerAInit+0x1e>
		setServoTime(i, 128);
	}
	
	TCA0.SPLIT.CTRLD |= (TCA_SPLIT_SPLITM_bm);
 366:	e0 e0       	ldi	r30, 0x00	; 0
 368:	fa e0       	ldi	r31, 0x0A	; 10
 36a:	83 81       	ldd	r24, Z+3	; 0x03
 36c:	81 60       	ori	r24, 0x01	; 1
 36e:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB |= 0x77;
 370:	81 81       	ldd	r24, Z+1	; 0x01
 372:	87 67       	ori	r24, 0x77	; 119
 374:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.CTRLA |= (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
 376:	80 81       	ld	r24, Z
 378:	8d 60       	ori	r24, 0x0D	; 13
 37a:	80 83       	st	Z, r24
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <clkInit>:
void clkInit(void){
	//CPU_CCP = 0xD8;
	//CLKCTRL.MCLKCTRLA = 0x80;
	CPU_CCP = 0xD8;
 382:	88 ed       	ldi	r24, 0xD8	; 216
 384:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = 0x01;
 386:	e0 e6       	ldi	r30, 0x60	; 96
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	91 83       	std	Z+1, r25	; 0x01
	CPU_CCP = 0xD8;
 38e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCTRLA = 0x02;
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	80 8b       	std	Z+16, r24	; 0x10
 394:	08 95       	ret

00000396 <main>:
//------------------------------------------------


int main(void)
{
	PORTA.DIR |= 0xF8;
 396:	e0 e0       	ldi	r30, 0x00	; 0
 398:	f4 e0       	ldi	r31, 0x04	; 4
 39a:	80 81       	ld	r24, Z
 39c:	88 6f       	ori	r24, 0xF8	; 248
 39e:	80 83       	st	Z, r24
	PORTB.DIR |= 0xF7;
 3a0:	e0 e2       	ldi	r30, 0x20	; 32
 3a2:	f4 e0       	ldi	r31, 0x04	; 4
 3a4:	80 81       	ld	r24, Z
 3a6:	87 6f       	ori	r24, 0xF7	; 247
 3a8:	80 83       	st	Z, r24
	PORTC.DIR |= 0x3F;
 3aa:	e0 e4       	ldi	r30, 0x40	; 64
 3ac:	f4 e0       	ldi	r31, 0x04	; 4
 3ae:	80 81       	ld	r24, Z
 3b0:	8f 63       	ori	r24, 0x3F	; 63
 3b2:	80 83       	st	Z, r24
	
	TWI_Slave_init();	
 3b4:	5b de       	rcall	.-842    	; 0x6c <TWI_Slave_init>
	clkInit();
 3b6:	e5 df       	rcall	.-54     	; 0x382 <clkInit>
	timerAInit();
 3b8:	bf df       	rcall	.-130    	; 0x338 <timerAInit>
	sei(); // Enable global interrupts
 3ba:	78 94       	sei
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <main+0x26>

000003be <__divmodhi4>:
 3be:	97 fb       	bst	r25, 7
 3c0:	07 2e       	mov	r0, r23
 3c2:	16 f4       	brtc	.+4      	; 0x3c8 <__divmodhi4+0xa>
 3c4:	00 94       	com	r0
 3c6:	06 d0       	rcall	.+12     	; 0x3d4 <__divmodhi4_neg1>
 3c8:	77 fd       	sbrc	r23, 7
 3ca:	08 d0       	rcall	.+16     	; 0x3dc <__divmodhi4_neg2>
 3cc:	0b d0       	rcall	.+22     	; 0x3e4 <__udivmodhi4>
 3ce:	07 fc       	sbrc	r0, 7
 3d0:	05 d0       	rcall	.+10     	; 0x3dc <__divmodhi4_neg2>
 3d2:	3e f4       	brtc	.+14     	; 0x3e2 <__divmodhi4_exit>

000003d4 <__divmodhi4_neg1>:
 3d4:	90 95       	com	r25
 3d6:	81 95       	neg	r24
 3d8:	9f 4f       	sbci	r25, 0xFF	; 255
 3da:	08 95       	ret

000003dc <__divmodhi4_neg2>:
 3dc:	70 95       	com	r23
 3de:	61 95       	neg	r22
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255

000003e2 <__divmodhi4_exit>:
 3e2:	08 95       	ret

000003e4 <__udivmodhi4>:
 3e4:	aa 1b       	sub	r26, r26
 3e6:	bb 1b       	sub	r27, r27
 3e8:	51 e1       	ldi	r21, 0x11	; 17
 3ea:	07 c0       	rjmp	.+14     	; 0x3fa <__udivmodhi4_ep>

000003ec <__udivmodhi4_loop>:
 3ec:	aa 1f       	adc	r26, r26
 3ee:	bb 1f       	adc	r27, r27
 3f0:	a6 17       	cp	r26, r22
 3f2:	b7 07       	cpc	r27, r23
 3f4:	10 f0       	brcs	.+4      	; 0x3fa <__udivmodhi4_ep>
 3f6:	a6 1b       	sub	r26, r22
 3f8:	b7 0b       	sbc	r27, r23

000003fa <__udivmodhi4_ep>:
 3fa:	88 1f       	adc	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	5a 95       	dec	r21
 400:	a9 f7       	brne	.-22     	; 0x3ec <__udivmodhi4_loop>
 402:	80 95       	com	r24
 404:	90 95       	com	r25
 406:	bc 01       	movw	r22, r24
 408:	cd 01       	movw	r24, r26
 40a:	08 95       	ret

0000040c <_exit>:
 40c:	f8 94       	cli

0000040e <__stop_program>:
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__stop_program>
