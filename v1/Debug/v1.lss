
v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000023d3  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001808  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000483  00000000  00000000  00003f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00004404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f61  00000000  00000000  00004474  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000238  00000000  00000000  000053d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000560d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_clear_bss>:
  40:	2e e3       	ldi	r18, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 30       	cpi	r26, 0x00	; 0
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	b6 d0       	rcall	.+364    	; 0x1be <main>
  52:	26 c1       	rjmp	.+588    	; 0x2a0 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <setServoTime>:
#include <stdlib.h>
#include <stdio.h>

volatile uint32_t TCA_t_counter = 0;

void setServoTime(int servo, int per){
  56:	9c 01       	movw	r18, r24
	int time = per * 41 / 255 + 39;
  58:	49 e2       	ldi	r20, 0x29	; 41
  5a:	46 9f       	mul	r20, r22
  5c:	c0 01       	movw	r24, r0
  5e:	47 9f       	mul	r20, r23
  60:	90 0d       	add	r25, r0
  62:	11 24       	eor	r1, r1
  64:	6f ef       	ldi	r22, 0xFF	; 255
  66:	70 e0       	ldi	r23, 0x00	; 0
  68:	f4 d0       	rcall	.+488    	; 0x252 <__divmodhi4>
  6a:	69 5d       	subi	r22, 0xD9	; 217
  6c:	7f 4f       	sbci	r23, 0xFF	; 255
	switch(servo){
  6e:	23 30       	cpi	r18, 0x03	; 3
  70:	31 05       	cpc	r19, r1
  72:	b1 f0       	breq	.+44     	; 0xa0 <__EEPROM_REGION_LENGTH__+0x20>
  74:	3c f4       	brge	.+14     	; 0x84 <__EEPROM_REGION_LENGTH__+0x4>
  76:	21 30       	cpi	r18, 0x01	; 1
  78:	31 05       	cpc	r19, r1
  7a:	61 f0       	breq	.+24     	; 0x94 <__EEPROM_REGION_LENGTH__+0x14>
  7c:	22 30       	cpi	r18, 0x02	; 2
  7e:	31 05       	cpc	r19, r1
  80:	61 f0       	breq	.+24     	; 0x9a <__EEPROM_REGION_LENGTH__+0x1a>
  82:	08 95       	ret
  84:	25 30       	cpi	r18, 0x05	; 5
  86:	31 05       	cpc	r19, r1
  88:	89 f0       	breq	.+34     	; 0xac <__EEPROM_REGION_LENGTH__+0x2c>
  8a:	6c f0       	brlt	.+26     	; 0xa6 <__EEPROM_REGION_LENGTH__+0x26>
  8c:	26 30       	cpi	r18, 0x06	; 6
  8e:	31 05       	cpc	r19, r1
  90:	81 f0       	breq	.+32     	; 0xb2 <__EEPROM_REGION_LENGTH__+0x32>
  92:	08 95       	ret
		case 1:
		TCA0.SPLIT.LCMP2 = time;
  94:	60 93 2c 0a 	sts	0x0A2C, r22	; 0x800a2c <__RODATA_PM_OFFSET__+0x7f8a2c>
		break;
  98:	08 95       	ret
		case 2:
		TCA0.SPLIT.LCMP1 = time;
  9a:	60 93 2a 0a 	sts	0x0A2A, r22	; 0x800a2a <__RODATA_PM_OFFSET__+0x7f8a2a>
		break;
  9e:	08 95       	ret
		case 3:
		TCA0.SPLIT.LCMP0 = time;
  a0:	60 93 28 0a 	sts	0x0A28, r22	; 0x800a28 <__RODATA_PM_OFFSET__+0x7f8a28>
		break;
  a4:	08 95       	ret
		case 4:
		TCA0.SPLIT.HCMP2 = time;
  a6:	60 93 2d 0a 	sts	0x0A2D, r22	; 0x800a2d <__RODATA_PM_OFFSET__+0x7f8a2d>
		break;
  aa:	08 95       	ret
		case 5:
		TCA0.SPLIT.HCMP1 = time;
  ac:	60 93 2b 0a 	sts	0x0A2B, r22	; 0x800a2b <__RODATA_PM_OFFSET__+0x7f8a2b>
		break;
  b0:	08 95       	ret
		case 6:
		TCA0.SPLIT.HCMP0 = time;
  b2:	60 93 29 0a 	sts	0x0A29, r22	; 0x800a29 <__RODATA_PM_OFFSET__+0x7f8a29>
  b6:	08 95       	ret

000000b8 <setMosfet>:
		break;
	}
}
void setMosfet(uint16_t data){
	uint8_t num = data &0x003F;
  b8:	f8 2f       	mov	r31, r24
  ba:	ff 73       	andi	r31, 0x3F	; 63
	uint8_t reverse_num = 0;
	for (int i = 0; i < 6; i++) {
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
		break;
	}
}
void setMosfet(uint16_t data){
	uint8_t num = data &0x003F;
	uint8_t reverse_num = 0;
  c0:	e0 e0       	ldi	r30, 0x00	; 0
	for (int i = 0; i < 6; i++) {
  c2:	18 c0       	rjmp	.+48     	; 0xf4 <setMosfet+0x3c>
		if ((num & (1 << i)))
  c4:	4f 2f       	mov	r20, r31
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	02 2e       	mov	r0, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <setMosfet+0x18>
  cc:	55 95       	asr	r21
  ce:	47 95       	ror	r20
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <setMosfet+0x14>
  d4:	40 ff       	sbrs	r20, 0
  d6:	0c c0       	rjmp	.+24     	; 0xf0 <setMosfet+0x38>
		reverse_num |= 1 << ((6 - 1) - i);
  d8:	65 e0       	ldi	r22, 0x05	; 5
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	62 1b       	sub	r22, r18
  de:	73 0b       	sbc	r23, r19
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <setMosfet+0x32>
  e6:	44 0f       	add	r20, r20
  e8:	55 1f       	adc	r21, r21
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <setMosfet+0x2e>
  ee:	e4 2b       	or	r30, r20
	}
}
void setMosfet(uint16_t data){
	uint8_t num = data &0x003F;
	uint8_t reverse_num = 0;
	for (int i = 0; i < 6; i++) {
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	26 30       	cpi	r18, 0x06	; 6
  f6:	31 05       	cpc	r19, r1
  f8:	2c f3       	brlt	.-54     	; 0xc4 <setMosfet+0xc>
		if ((num & (1 << i)))
		reverse_num |= 1 << ((6 - 1) - i);
	}
	PORTC.OUT = (reverse_num);
  fa:	e0 93 44 04 	sts	0x0444, r30	; 0x800444 <__RODATA_PM_OFFSET__+0x7f8444>
	PORTB.OUT = (PORTB.IN & 0x2F) | (((data &0x0040) << 1) | ((data &0x0080) >> 1) | ((data &0x0100) >> 4));
  fe:	e0 e2       	ldi	r30, 0x20	; 32
 100:	f4 e0       	ldi	r31, 0x04	; 4
 102:	30 85       	ldd	r19, Z+8	; 0x08
 104:	bc 01       	movw	r22, r24
 106:	60 78       	andi	r22, 0x80	; 128
 108:	77 27       	eor	r23, r23
 10a:	76 95       	lsr	r23
 10c:	67 95       	ror	r22
 10e:	ac 01       	movw	r20, r24
 110:	44 27       	eor	r20, r20
 112:	51 70       	andi	r21, 0x01	; 1
 114:	52 95       	swap	r21
 116:	42 95       	swap	r20
 118:	4f 70       	andi	r20, 0x0F	; 15
 11a:	45 27       	eor	r20, r21
 11c:	5f 70       	andi	r21, 0x0F	; 15
 11e:	45 27       	eor	r20, r21
 120:	28 2f       	mov	r18, r24
 122:	20 74       	andi	r18, 0x40	; 64
 124:	22 0f       	add	r18, r18
 126:	26 2b       	or	r18, r22
 128:	24 2b       	or	r18, r20
 12a:	3f 72       	andi	r19, 0x2F	; 47
 12c:	23 2b       	or	r18, r19
 12e:	24 83       	std	Z+4, r18	; 0x04
	PORTA.OUT = (PORTA.IN & 0x3F) | (((data &0x0200) >> 2) | ((data &0x0400) >> 4));
 130:	e0 e0       	ldi	r30, 0x00	; 0
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	20 85       	ldd	r18, Z+8	; 0x08
 136:	ac 01       	movw	r20, r24
 138:	44 27       	eor	r20, r20
 13a:	52 70       	andi	r21, 0x02	; 2
 13c:	56 95       	lsr	r21
 13e:	47 95       	ror	r20
 140:	56 95       	lsr	r21
 142:	47 95       	ror	r20
 144:	88 27       	eor	r24, r24
 146:	94 70       	andi	r25, 0x04	; 4
 148:	92 95       	swap	r25
 14a:	82 95       	swap	r24
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	89 27       	eor	r24, r25
 150:	9f 70       	andi	r25, 0x0F	; 15
 152:	89 27       	eor	r24, r25
 154:	92 2f       	mov	r25, r18
 156:	9f 73       	andi	r25, 0x3F	; 63
 158:	84 2b       	or	r24, r20
 15a:	89 2b       	or	r24, r25
 15c:	84 83       	std	Z+4, r24	; 0x04
 15e:	08 95       	ret

00000160 <timerAInit>:
}

void timerAInit(void)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
	PORTMUX.CTRLC |= (PORTMUX_TCA02_bm);
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f2 e0       	ldi	r31, 0x02	; 2
 168:	82 81       	ldd	r24, Z+2	; 0x02
 16a:	84 60       	ori	r24, 0x04	; 4
 16c:	82 83       	std	Z+2, r24	; 0x02
	
	TCA0.SPLIT.LPER = 255;
 16e:	e0 e0       	ldi	r30, 0x00	; 0
 170:	fa e0       	ldi	r31, 0x0A	; 10
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	86 a3       	std	Z+38, r24	; 0x26
	TCA0.SPLIT.HPER = 255;
 176:	87 a3       	std	Z+39, r24	; 0x27
	
	for(int i = 1; i<=6; i++){
 178:	c1 e0       	ldi	r28, 0x01	; 1
 17a:	d0 e0       	ldi	r29, 0x00	; 0
 17c:	05 c0       	rjmp	.+10     	; 0x188 <timerAInit+0x28>
		setServoTime(i, 128);
 17e:	60 e8       	ldi	r22, 0x80	; 128
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	68 df       	rcall	.-304    	; 0x56 <setServoTime>
	PORTMUX.CTRLC |= (PORTMUX_TCA02_bm);
	
	TCA0.SPLIT.LPER = 255;
	TCA0.SPLIT.HPER = 255;
	
	for(int i = 1; i<=6; i++){
 186:	21 96       	adiw	r28, 0x01	; 1
 188:	c7 30       	cpi	r28, 0x07	; 7
 18a:	d1 05       	cpc	r29, r1
 18c:	c4 f3       	brlt	.-16     	; 0x17e <timerAInit+0x1e>
		setServoTime(i, 128);
	}
	
	TCA0.SPLIT.CTRLD |= (TCA_SPLIT_SPLITM_bm);
 18e:	e0 e0       	ldi	r30, 0x00	; 0
 190:	fa e0       	ldi	r31, 0x0A	; 10
 192:	83 81       	ldd	r24, Z+3	; 0x03
 194:	81 60       	ori	r24, 0x01	; 1
 196:	83 83       	std	Z+3, r24	; 0x03
	TCA0.SPLIT.CTRLB |= 0x77;
 198:	81 81       	ldd	r24, Z+1	; 0x01
 19a:	87 67       	ori	r24, 0x77	; 119
 19c:	81 83       	std	Z+1, r24	; 0x01

	TCA0.SPLIT.CTRLA |= (TCA_SPLIT_CLKSEL_DIV256_gc) | (TCA_SPLIT_ENABLE_bm);
 19e:	80 81       	ld	r24, Z
 1a0:	8d 60       	ori	r24, 0x0D	; 13
 1a2:	80 83       	st	Z, r24
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <clkInit>:
void clkInit(void){
	//CPU_CCP = 0xD8;
	//CLKCTRL.MCLKCTRLA = 0x80;
	CPU_CCP = 0xD8;
 1aa:	88 ed       	ldi	r24, 0xD8	; 216
 1ac:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = 0x01;
 1ae:	e0 e6       	ldi	r30, 0x60	; 96
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	91 83       	std	Z+1, r25	; 0x01
	CPU_CCP = 0xD8;
 1b6:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSC20MCTRLA = 0x02;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 8b       	std	Z+16, r24	; 0x10
 1bc:	08 95       	ret

000001be <main>:
//------------------------------------------------


int main(void)
{
	PORTA.DIR |= 0xF8;
 1be:	e0 e0       	ldi	r30, 0x00	; 0
 1c0:	f4 e0       	ldi	r31, 0x04	; 4
 1c2:	80 81       	ld	r24, Z
 1c4:	88 6f       	ori	r24, 0xF8	; 248
 1c6:	80 83       	st	Z, r24
	PORTB.DIR |= 0xF3;
 1c8:	e0 e2       	ldi	r30, 0x20	; 32
 1ca:	f4 e0       	ldi	r31, 0x04	; 4
 1cc:	80 81       	ld	r24, Z
 1ce:	83 6f       	ori	r24, 0xF3	; 243
 1d0:	80 83       	st	Z, r24
	PORTC.DIR |= 0x3F;
 1d2:	e0 e4       	ldi	r30, 0x40	; 64
 1d4:	f4 e0       	ldi	r31, 0x04	; 4
 1d6:	80 81       	ld	r24, Z
 1d8:	8f 63       	ori	r24, 0x3F	; 63
 1da:	80 83       	st	Z, r24
	
	clkInit();
 1dc:	e6 df       	rcall	.-52     	; 0x1aa <clkInit>
	timerAInit();
 1de:	c0 df       	rcall	.-128    	; 0x160 <timerAInit>
	sei(); // Enable global interrupts
 1e0:	78 94       	sei
	setMosfet(0b0101001100111011);
 1e2:	8b e3       	ldi	r24, 0x3B	; 59
 1e4:	93 e5       	ldi	r25, 0x53	; 83
 1e6:	68 df       	rcall	.-304    	; 0xb8 <setMosfet>

	while (1)
	{
		for(int i = 0; i<=255; i++){
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <__DATA_REGION_LENGTH__+0x4>
			setServoTime(1, i);
 1ee:	be 01       	movw	r22, r28
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	30 df       	rcall	.-416    	; 0x56 <setServoTime>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	87 ea       	ldi	r24, 0xA7	; 167
 1f8:	91 e6       	ldi	r25, 0x61	; 97
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x3c>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <__DATA_REGION_LENGTH__>
 200:	00 00       	nop
	sei(); // Enable global interrupts
	setMosfet(0b0101001100111011);

	while (1)
	{
		for(int i = 0; i<=255; i++){
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	cf 3f       	cpi	r28, 0xFF	; 255
 206:	d1 05       	cpc	r29, r1
 208:	91 f3       	breq	.-28     	; 0x1ee <main+0x30>
 20a:	8c f3       	brlt	.-30     	; 0x1ee <main+0x30>
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	28 e0       	ldi	r18, 0x08	; 8
 210:	8d e3       	ldi	r24, 0x3D	; 61
 212:	91 50       	subi	r25, 0x01	; 1
 214:	20 40       	sbci	r18, 0x00	; 0
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <__DATA_REGION_LENGTH__+0x12>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__DATA_REGION_LENGTH__+0x1c>
 21c:	00 00       	nop
			setServoTime(1, i);
			_delay_ms(5);
		}
		_delay_ms(1000);
		for(int i = 255; i>=0; i--){
 21e:	cf ef       	ldi	r28, 0xFF	; 255
 220:	d0 e0       	ldi	r29, 0x00	; 0
 222:	0b c0       	rjmp	.+22     	; 0x23a <__DATA_REGION_LENGTH__+0x3a>
			setServoTime(1, i);
 224:	be 01       	movw	r22, r28
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	15 df       	rcall	.-470    	; 0x56 <setServoTime>
 22c:	87 ea       	ldi	r24, 0xA7	; 167
 22e:	91 e6       	ldi	r25, 0x61	; 97
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <__DATA_REGION_LENGTH__+0x30>
 234:	00 c0       	rjmp	.+0      	; 0x236 <__DATA_REGION_LENGTH__+0x36>
 236:	00 00       	nop
		for(int i = 0; i<=255; i++){
			setServoTime(1, i);
			_delay_ms(5);
		}
		_delay_ms(1000);
		for(int i = 255; i>=0; i--){
 238:	21 97       	sbiw	r28, 0x01	; 1
 23a:	dd 23       	and	r29, r29
 23c:	9c f7       	brge	.-26     	; 0x224 <__DATA_REGION_LENGTH__+0x24>
 23e:	9f ef       	ldi	r25, 0xFF	; 255
 240:	28 e0       	ldi	r18, 0x08	; 8
 242:	8d e3       	ldi	r24, 0x3D	; 61
 244:	91 50       	subi	r25, 0x01	; 1
 246:	20 40       	sbci	r18, 0x00	; 0
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <__DATA_REGION_LENGTH__+0x44>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <__DATA_REGION_LENGTH__+0x4e>
 24e:	00 00       	nop
 250:	cb cf       	rjmp	.-106    	; 0x1e8 <main+0x2a>

00000252 <__divmodhi4>:
 252:	97 fb       	bst	r25, 7
 254:	07 2e       	mov	r0, r23
 256:	16 f4       	brtc	.+4      	; 0x25c <__divmodhi4+0xa>
 258:	00 94       	com	r0
 25a:	06 d0       	rcall	.+12     	; 0x268 <__divmodhi4_neg1>
 25c:	77 fd       	sbrc	r23, 7
 25e:	08 d0       	rcall	.+16     	; 0x270 <__divmodhi4_neg2>
 260:	0b d0       	rcall	.+22     	; 0x278 <__udivmodhi4>
 262:	07 fc       	sbrc	r0, 7
 264:	05 d0       	rcall	.+10     	; 0x270 <__divmodhi4_neg2>
 266:	3e f4       	brtc	.+14     	; 0x276 <__divmodhi4_exit>

00000268 <__divmodhi4_neg1>:
 268:	90 95       	com	r25
 26a:	81 95       	neg	r24
 26c:	9f 4f       	sbci	r25, 0xFF	; 255
 26e:	08 95       	ret

00000270 <__divmodhi4_neg2>:
 270:	70 95       	com	r23
 272:	61 95       	neg	r22
 274:	7f 4f       	sbci	r23, 0xFF	; 255

00000276 <__divmodhi4_exit>:
 276:	08 95       	ret

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
